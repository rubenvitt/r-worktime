# Task ID: 6
# Title: Build React Frontend Dashboard with Real-time Updates
# Status: pending
# Dependencies: 5
# Priority: medium
# Description: Create the complete React frontend application with Material-UI components, featuring the main dashboard, file upload interface, authentication views, and responsive design as specified in the PRD and architecture.
# Details:
Initialize React app with Vite, TypeScript, and Material-UI v5. Set up Zustand store for state management and TanStack Query for API communication. Create authentication context and protected route handling. Build login/logout components with form validation. Implement main dashboard with prominent balance display (green positive, red negative styling). Create file upload component using react-dropzone with drag-and-drop functionality. Add upload progress indicators and error/success messaging. Build responsive grid layout using MUI Grid system for all screen sizes. Implement loading states with skeleton loaders throughout the application. Create API service layer using Axios with JWT token handling. Add auto-refresh functionality when new data is imported. Set up environment configuration for API URL and build optimization.

# Test Strategy:
Test responsive design works on mobile and desktop viewports. Verify file upload shows proper progress and error states. Confirm authentication flow redirects appropriately. Test dashboard displays accurate overtime balance with correct color coding. Validate loading states appear during API calls. Ensure auto-refresh updates data without user intervention.

# Subtasks:
## 1. Create authentication pages and components [pending]
### Dependencies: None
### Description: Build login, register, and auth-related UI components using Next.js and shadcn/ui
### Details:
Create app/(auth)/login/page.tsx:
- Server Component with form using Server Actions
- shadcn/ui Form with react-hook-form
- Email and password fields with validation
- "Remember me" checkbox
- Link to register page

Create app/(auth)/register/page.tsx:
- Registration form with email, password, confirm password
- Client-side validation with Zod
- Server Action for user creation
- Auto-login after registration

Create app/components/layout/user-menu.tsx:
- Display current user email
- Logout button with signOut() from NextAuth
- User settings link

## 2. Build main dashboard with overtime display [pending]
### Dependencies: None
### Description: Create dashboard page showing overtime balance and key statistics
### Details:
Create app/(dashboard)/dashboard/page.tsx:
- Server Component fetching initial data
- Display cards using shadcn/ui Card component:
  * Overtime balance (large number, color-coded)
  * This week's balance
  * This month's balance
  * Last import date

Create app/components/dashboard/overtime-card.tsx:
- Client Component with live updates via TanStack Query
- Color coding: green (positive), red (negative)
- Loading skeleton while fetching
- Refresh button with mutation

Create app/components/dashboard/stats-grid.tsx:
- Responsive grid layout with Tailwind
- Statistical cards for weekly/monthly views
- Charts using Recharts for trends

## 3. Create weekly and entries view pages [pending]
### Dependencies: None
### Description: Build pages for viewing time entries and weekly breakdowns
### Details:
Create app/(dashboard)/entries/page.tsx:
- Table view using shadcn/ui Table
- Columns: Date, Start, End, Duration, Type, Project
- Pagination with shadcn/ui Pagination
- Filter by date range and type
- Sort by columns
- Delete entries with confirmation dialog

Create app/(dashboard)/statistics/weekly/page.tsx:
- Week selector with navigation arrows
- Daily breakdown table
- Visual chart of daily hours
- Week total and overtime calculation
- Export to CSV button

Use TanStack Table for advanced table features
Implement virtual scrolling for large datasets
Add loading states and error boundaries

