# Task ID: 4
# Title: Create File Upload and JSON Processing System
# Status: pending
# Dependencies: 3
# Priority: medium
# Description: Implement the drag-and-drop file upload interface with comprehensive JSON validation, parsing, and the Timing data import pipeline as detailed in the architecture documentation.
# Details:
Create file upload endpoint with multer middleware (10MB limit). Implement comprehensive JSON validation for Timing export format. Build ImportService class with transaction-based processing as shown in architecture.ts example. Create parseTimingEntry method to transform Timing data to TimeEntry format. Implement duplicate detection and replacement logic for same-day entries. Add support for detecting entry types (WORK, VACATION, SICK, HOLIDAY) from project paths. Create ImportLog records for tracking all imports. Build preview functionality showing affected dates, new/replaced entries, and warnings. Add comprehensive error handling for malformed JSON, invalid dates, and processing failures. Implement file hash generation for duplicate import detection.

# Test Strategy:
Test upload of valid Timing JSON file processes correctly. Verify file size limits are enforced. Confirm duplicate imports replace existing entries properly. Test invalid JSON files are rejected with clear error messages. Validate import logging captures all processing statistics. Ensure transaction rollback works on processing errors.

# Subtasks:
## 1. Create file upload API route with Next.js [pending]
### Dependencies: None
### Description: Implement file upload endpoint using Next.js 15 API routes with proper validation
### Details:
Create app/api/upload/route.ts:
- POST handler using FormData API
- Parse multipart/form-data with Next.js built-in support
- Validate file size (max 10MB)
- Validate file type (JSON only)
- Parse and validate JSON structure
- Use Zod schema for Timing export validation
Required fields: id, startDate, endDate, duration, project, activityTitle
Return preview data before actual import
Error handling with proper status codes

## 2. Implement ImportService with Prisma transactions [pending]
### Dependencies: None
### Description: Create service class for processing Timing exports with database transactions
### Details:
Create app/services/import.service.ts:
- processTimingExport() method with Prisma $transaction
- analyzeImport() for duplicate detection based on timingId
- parseTimingEntry() to transform Timing format to TimeEntry
- detectType() method for entry classification:
  * 'Krankheit' → SICK
  * 'Urlaub' → VACATION
  * 'Feiertag' → HOLIDAY
  * Default → WORK
- Replace same-day entries in transaction
- Generate ImportLog records with statistics
- Return preview with affected dates and counts
Use packages/shared/types for all type definitions

## 3. Create upload UI component with drag-and-drop [pending]
### Dependencies: None
### Description: Build React component for file upload with drag-and-drop support and preview
### Details:
Create app/components/upload/upload-zone.tsx:
- Use react-dropzone or native HTML5 drag-and-drop
- Show upload progress with shadcn/ui Progress
- Display file validation errors with Toast
- Show import preview before confirmation:
  * Affected dates list
  * New entries count
  * Replaced entries count
  * Warnings for duplicates
- Use TanStack Query mutation for upload
- Optimistic UI updates
- Success/error notifications
Style with Tailwind CSS and shadcn/ui components

