# Task ID: 5
# Title: Develop Overtime Calculation Engine with Performance Optimization
# Status: pending
# Dependencies: 4
# Priority: high
# Description: Build the core overtime calculation system with daily, weekly, and monthly balance aggregation, including caching mechanisms and the materialized view integration from the architecture.
# Details:
Create OvertimeService with methods for daily, weekly, monthly balance calculations. Implement calculation logic: actual hours - target hours (from UserSettings). Build cumulative balance calculator across all time periods. Add support for different entry types with proper overtime rules (weekend = 100% overtime). Create 15-minute precision rounding for all calculations. Implement CacheService as shown in architecture with 5-minute TTL for balance queries. Build WeeklyStatisticsService using the materialized view when available. Add cache invalidation on data imports and updates. Create recalculation endpoints for correcting historical data. Implement statistical aggregation endpoints for dashboard display. Add support for custom work day definitions from user settings.

# Test Strategy:
Verify daily balance calculations match manual calculations. Test weekly and monthly aggregations sum correctly. Confirm cache improves query performance. Validate cache invalidation works after imports. Test overtime rules apply correctly for weekends. Ensure precision rounding maintains accuracy.

# Subtasks:
## 1. Create OvertimeService with calculation logic [pending]
### Dependencies: None
### Description: Build service for calculating overtime balances with caching
### Details:
Create app/services/overtime.service.ts:
- calculateBalance(userId, startDate?, endDate?) main method
- Use Prisma to fetch TimeEntry records
- Compare actual hours vs UserSettings.weeklyHours
- Handle different entry types:
  * WORK: Count as worked hours
  * VACATION/SICK: Count as target hours
  * HOLIDAY: Skip from calculation
- 15-minute precision: Math.round(hours * 4) / 4
- Implement in-memory caching with 5-minute TTL
- invalidateCache() on data changes
Create API route app/api/statistics/overtime/route.ts
Return format: { balance: number, details: {...} }

## 2. Create weekly and monthly statistics API routes [pending]
### Dependencies: None
### Description: Build API endpoints for weekly and monthly overtime statistics
### Details:
Create app/api/statistics/weekly/route.ts:
- GET handler with year and week parameters
- Aggregate daily entries by week
- Calculate weekly overtime (actual - target)
- Return daily breakdown and weekly total

Create app/api/statistics/monthly/route.ts:
- GET handler with year and month parameters
- Aggregate entries by month
- Include billable vs non-billable hours
- Return weekly breakdown within month

Both routes use OvertimeService for calculations
Add proper TypeScript types in packages/shared/types/statistics.ts
Use Server Components where possible for caching

