# Task ID: 3
# Title: Build JWT Authentication System with Security Hardening
# Status: pending
# Dependencies: 2
# Priority: high
# Description: Implement secure JWT-based authentication system with bcrypt password hashing, secure token management, and comprehensive security middleware as defined in the architecture.
# Details:
Install required packages: @nestjs/passport, @nestjs/jwt, passport-jwt, bcrypt. Create AuthModule with JWT strategy implementation matching architecture example. Implement AuthService with bcrypt password hashing (12 rounds). Create login endpoint with username/password validation. Set up JWT token generation with 30-day expiration for single-user use case. Implement JwtAuthGuard for route protection. Create logout functionality (blacklist tokens if needed). Add security middleware: helmet, CORS configuration, rate limiting (100 requests/15min window). Set up secure cookie handling for tokens if using cookie strategy. Create authentication-related DTOs and validation.

# Test Strategy:
Test successful login with valid credentials returns JWT token. Verify invalid credentials are rejected. Confirm protected routes require valid JWT. Test logout clears authentication state. Validate rate limiting blocks excessive requests. Ensure CORS allows only configured frontend origin.

# Subtasks:
## 1. Install authentication dependencies and create auth module [pending]
### Dependencies: None
### Description: Set up all required authentication packages and create the basic auth module structure
### Details:
Install packages: npm install bcrypt jsonwebtoken passport passport-jwt passport-local @types/bcrypt @types/passport-jwt. Create auth/ directory in backend/src. Create auth.module.ts, auth.service.ts, auth.controller.ts files. Set up JWT module configuration with secret and expiration time from environment. Create strategies/ folder for JWT and local strategies. Configure auth module imports and providers.

## 2. Implement login/logout endpoints and JWT generation [pending]
### Dependencies: None
### Description: Create authentication endpoints with JWT token generation and validation
### Details:
Create POST /api/auth/login endpoint accepting username/password. Implement password validation using bcrypt.compare() with hashed password from database. Generate JWT token with user payload and 24h expiration (30d for remember me). Create POST /api/auth/logout endpoint to invalidate sessions. Implement refresh token mechanism for token renewal. Add GET /api/auth/me endpoint to get current user info. Return user data without password hash in responses.

