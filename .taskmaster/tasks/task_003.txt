# Task ID: 3
# Title: Build JWT Authentication System with Security Hardening
# Status: pending
# Dependencies: 2
# Priority: high
# Description: Implement secure JWT-based authentication system with bcrypt password hashing, secure token management, and comprehensive security middleware as defined in the architecture.
# Details:
Install required packages: @nestjs/passport, @nestjs/jwt, passport-jwt, bcrypt. Create AuthModule with JWT strategy implementation matching architecture example. Implement AuthService with bcrypt password hashing (12 rounds). Create login endpoint with username/password validation. Set up JWT token generation with 30-day expiration for single-user use case. Implement JwtAuthGuard for route protection. Create logout functionality (blacklist tokens if needed). Add security middleware: helmet, CORS configuration, rate limiting (100 requests/15min window). Set up secure cookie handling for tokens if using cookie strategy. Create authentication-related DTOs and validation.

# Test Strategy:
Test successful login with valid credentials returns JWT token. Verify invalid credentials are rejected. Confirm protected routes require valid JWT. Test logout clears authentication state. Validate rate limiting blocks excessive requests. Ensure CORS allows only configured frontend origin.

# Subtasks:
## 1. Install and configure NextAuth.js v5 [pending]
### Dependencies: None
### Description: Set up NextAuth.js v5 (Auth.js) with Prisma adapter for authentication
### Details:
Install dependencies:
- pnpm add next-auth@beta @auth/prisma-adapter
- pnpm add bcryptjs @types/bcryptjs
Create auth configuration file at app/lib/auth.ts
Set up NextAuth with:
- PrismaAdapter for database integration
- Credentials provider for email/password
- JWT strategy with 30-day maxAge
- Session callbacks for user data
Configure environment variables:
- NEXTAUTH_URL=http://localhost:3000
- NEXTAUTH_SECRET (generate with: openssl rand -base64 32)
Create auth types in packages/shared/types/auth.ts

## 2. Create auth API routes and middleware [pending]
### Dependencies: None
### Description: Implement authentication API routes and middleware for route protection
### Details:
Create app/api/auth/[...nextauth]/route.ts:
- Export GET and POST handlers from NextAuth
Create app/api/auth/register/route.ts:
- POST endpoint for user registration
- Hash password with bcryptjs (10 rounds)
- Create user in database with Prisma
- Return success response
Create middleware.ts in project root:
- Protect dashboard routes (/dashboard/*)
- Protect API routes (/api/* except /api/auth/*)
- Redirect unauthenticated users to /login
Create auth helper functions:
- getCurrentUser() server function
- useSession() client hook wrapper

