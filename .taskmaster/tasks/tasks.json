{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Initialize Project Structure and Core Infrastructure",
        "description": "Set up a Next.js 15 monorepo with App Router, Turbopack, TypeScript, Tailwind CSS, shadcn/ui components, and Turborepo structure. Configure PostgreSQL with Prisma, implement authentication with NextAuth.js v5, and establish development tooling.",
        "status": "pending",
        "dependencies": [],
        "priority": "high",
        "details": "Initialize Next.js 15 project using pnpm create next-app@latest with TypeScript, Tailwind CSS, App Router, and Turbopack. Set up monorepo structure with Turborepo containing apps/web and packages (shared, database, ui). Configure PostgreSQL database with Docker Compose using PostgreSQL 17. Implement database layer with Prisma ORM including complete schema from architecture.md. Set up NextAuth.js v5 (Auth.js) with Prisma adapter for authentication. Install and configure shadcn/ui components. Configure ESLint, Prettier, Husky git hooks, and lint-staged. Set up environment configuration (.env.example, .env.local) with all required variables for Next.js and database. Initialize proper .gitignore and establish Git repository structure. Configure TanStack Query for server state management. Set up development scripts and build pipeline with Turborepo.",
        "testStrategy": "Verify Next.js development server starts without errors on port 3000. Confirm database connection works via Prisma Studio. Test authentication flow with NextAuth.js login/logout. Validate Tailwind CSS and shadcn/ui components render correctly. Ensure TypeScript compilation passes with strict mode. Test monorepo build pipeline with Turborepo. Verify environment variable loading works correctly.",
        "subtasks": [
          {
            "id": 1,
            "title": "Initialize Next.js 15 project with monorepo structure",
            "description": "Set up Next.js 15 with App Router, TypeScript, Tailwind CSS, Turbopack and configure Turborepo monorepo structure",
            "status": "pending",
            "dependencies": [],
            "details": "Run pnpm create next-app@latest r-worktime --typescript --tailwind --app --turbopack to create base Next.js project. Initialize Turborepo with pnpm add -D turbo and create turborepo.json configuration. Set up monorepo structure: apps/web/ for Next.js app, packages/shared/ for types and utilities, packages/database/ for Prisma client, packages/ui/ for shared UI components. Configure root package.json with workspaces and turbo scripts. Create proper tsconfig.json files for each workspace with path mapping. Set up pnpm-workspace.yaml to define workspace packages.",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Configure PostgreSQL and Prisma database layer",
            "description": "Set up PostgreSQL with Docker Compose and implement complete Prisma schema with migrations",
            "status": "pending",
            "dependencies": [
              1
            ],
            "details": "Create docker-compose.yml with PostgreSQL 17-alpine service, including health checks and volume persistence. Set up packages/database with Prisma client and complete schema from architecture.md including User, UserSettings, TimeEntry, ImportLog models with all relationships, indexes, and constraints. Configure proper database connection with DATABASE_URL and DATABASE_URL_UNPOOLED for connection pooling. Generate Prisma client and create initial migration. Set up database seeding script for development with default admin user. Create weekly_overtime_summary materialized view for performance optimization.",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Implement NextAuth.js v5 authentication system",
            "description": "Set up NextAuth.js v5 (Auth.js) with Prisma adapter and credentials provider for user authentication",
            "status": "pending",
            "dependencies": [
              2
            ],
            "details": "Install next-auth@beta and @auth/prisma-adapter. Configure NextAuth.js in apps/web/auth.ts with Prisma adapter connection. Set up credentials provider for email/password authentication with bcrypt password hashing. Create authentication API routes in app/api/auth/[...nextauth]/route.ts. Implement session middleware and protect API routes. Configure JWT strategy with 30-day expiration. Set up authentication context and session providers for client components. Create login/logout components using NextAuth signIn/signOut functions. Configure environment variables: NEXTAUTH_URL, NEXTAUTH_SECRET.",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Setup UI layer with shadcn/ui and configure development tools",
            "description": "Install shadcn/ui components, configure development tooling with ESLint, Prettier, and Git hooks",
            "status": "pending",
            "dependencies": [
              3
            ],
            "details": "Run pnpm dlx shadcn-ui@latest init to setup shadcn/ui in apps/web with Tailwind CSS configuration. Install core shadcn/ui components: button, input, label, card, dialog, dropdown-menu, toast. Set up packages/ui as shared component library with Tailwind CSS and Radix UI dependencies. Configure ESLint with next/core-web-vitals, TypeScript rules, and Prettier integration. Set up Prettier configuration with consistent formatting rules (2 spaces, single quotes). Install and configure Husky and lint-staged for pre-commit hooks. Set up Turborepo build pipeline scripts in package.json files. Install TanStack Query and React Hook Form with Zod validation. Create .env.example with all required environment variables documented.",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Set up PostgreSQL with Docker and Prisma",
            "description": "Configure PostgreSQL database using Docker Compose and initialize Prisma ORM",
            "details": "Create docker-compose.yml with PostgreSQL 17-alpine:\n- Set POSTGRES_USER=worktime_user\n- Set POSTGRES_PASSWORD via .env\n- Set POSTGRES_DB=worktime\n- Configure volume for data persistence\n- Add health check\nInstall Prisma: pnpm add -D prisma && pnpm add @prisma/client\nInitialize Prisma: pnpm prisma init\nMove Prisma to packages/database\nConfigure DATABASE_URL in .env\nSet up Prisma client singleton in packages/database",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 1
          },
          {
            "id": 6,
            "title": "Configure development tools and Git hooks",
            "description": "Set up ESLint, Prettier, Husky, and lint-staged for code quality",
            "details": "Install dev dependencies:\n- pnpm add -D eslint eslint-config-next @typescript-eslint/parser @typescript-eslint/eslint-plugin\n- pnpm add -D prettier prettier-plugin-tailwindcss\n- pnpm add -D husky lint-staged\nConfigure .eslintrc.json with Next.js and TypeScript rules\nCreate .prettierrc with Tailwind CSS plugin\nInitialize Husky: pnpm dlx husky-init && pnpm install\nSet up pre-commit hook with lint-staged\nConfigure VS Code settings in .vscode/settings.json",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 1
          }
        ]
      },
      {
        "id": 2,
        "title": "Implement Database Schema and Prisma Setup",
        "description": "Implement the complete database schema using Prisma ORM with all models (User, UserSettings, TimeEntry, ImportLog) including relationships, indexes, and constraints as specified in the architecture documentation.",
        "details": "Copy the complete Prisma schema from architecture.md into schema.prisma. Configure PostgreSQL datasource with proper connection string. Generate Prisma client and ensure types are available. Create initial migration with npx prisma migrate dev. Set up database seeding script for development with default admin user. Configure proper indexes for performance: userId+date DESC, userId+type, and unique constraints for timing import deduplication. Create the weekly_overtime_summary materialized view via raw SQL migration. Test all relationships work correctly including cascade deletes. Implement database connection health checks as shown in architecture.",
        "testStrategy": "Verify all models can be created, updated, and deleted. Test foreign key constraints work properly. Confirm indexes improve query performance. Validate seeding creates proper test data. Test database health check endpoint responds correctly.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Initialize Prisma and create schema file",
            "description": "Set up Prisma ORM in the backend project and create the complete database schema",
            "details": "Install Prisma dependencies: npm install prisma @prisma/client. Initialize Prisma with npx prisma init. Create complete schema.prisma with all models: User, TimeEntry tables. Configure PostgreSQL datasource with DATABASE_URL from environment. Add model fields with proper types, @id, @unique, @map decorators. Set up relationships between models (@relation). Add database-level constraints and indexes. Configure Prisma to use lowercase table names with @@map.",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 2
          },
          {
            "id": 2,
            "title": "Run migrations and generate Prisma client",
            "description": "Execute database migrations and generate TypeScript types from schema",
            "details": "Run npx prisma migrate dev --name init to create initial migration. Verify migration SQL files are created in prisma/migrations. Generate Prisma Client with npx prisma generate. Verify TypeScript types are available in node_modules/.prisma/client. Test database connection with npx prisma db push. Create npm scripts for common Prisma commands (migrate, generate, studio). Document migration workflow in README.",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 2
          }
        ]
      },
      {
        "id": 3,
        "title": "Build JWT Authentication System with Security Hardening",
        "description": "Implement secure JWT-based authentication system with bcrypt password hashing, secure token management, and comprehensive security middleware as defined in the architecture.",
        "details": "Install required packages: @nestjs/passport, @nestjs/jwt, passport-jwt, bcrypt. Create AuthModule with JWT strategy implementation matching architecture example. Implement AuthService with bcrypt password hashing (12 rounds). Create login endpoint with username/password validation. Set up JWT token generation with 30-day expiration for single-user use case. Implement JwtAuthGuard for route protection. Create logout functionality (blacklist tokens if needed). Add security middleware: helmet, CORS configuration, rate limiting (100 requests/15min window). Set up secure cookie handling for tokens if using cookie strategy. Create authentication-related DTOs and validation.",
        "testStrategy": "Test successful login with valid credentials returns JWT token. Verify invalid credentials are rejected. Confirm protected routes require valid JWT. Test logout clears authentication state. Validate rate limiting blocks excessive requests. Ensure CORS allows only configured frontend origin.",
        "priority": "high",
        "dependencies": [
          2
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Install and configure NextAuth.js v5",
            "description": "Set up NextAuth.js v5 (Auth.js) with Prisma adapter for authentication",
            "details": "Install dependencies:\n- pnpm add next-auth@beta @auth/prisma-adapter\n- pnpm add bcryptjs @types/bcryptjs\nCreate auth configuration file at app/lib/auth.ts\nSet up NextAuth with:\n- PrismaAdapter for database integration\n- Credentials provider for email/password\n- JWT strategy with 30-day maxAge\n- Session callbacks for user data\nConfigure environment variables:\n- NEXTAUTH_URL=http://localhost:3000\n- NEXTAUTH_SECRET (generate with: openssl rand -base64 32)\nCreate auth types in packages/shared/types/auth.ts",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 3
          },
          {
            "id": 2,
            "title": "Create auth API routes and middleware",
            "description": "Implement authentication API routes and middleware for route protection",
            "details": "Create app/api/auth/[...nextauth]/route.ts:\n- Export GET and POST handlers from NextAuth\nCreate app/api/auth/register/route.ts:\n- POST endpoint for user registration\n- Hash password with bcryptjs (10 rounds)\n- Create user in database with Prisma\n- Return success response\nCreate middleware.ts in project root:\n- Protect dashboard routes (/dashboard/*)\n- Protect API routes (/api/* except /api/auth/*)\n- Redirect unauthenticated users to /login\nCreate auth helper functions:\n- getCurrentUser() server function\n- useSession() client hook wrapper",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 3
          }
        ]
      },
      {
        "id": 4,
        "title": "Create File Upload and JSON Processing System",
        "description": "Implement the drag-and-drop file upload interface with comprehensive JSON validation, parsing, and the Timing data import pipeline as detailed in the architecture documentation.",
        "details": "Create file upload endpoint with multer middleware (10MB limit). Implement comprehensive JSON validation for Timing export format. Build ImportService class with transaction-based processing as shown in architecture.ts example. Create parseTimingEntry method to transform Timing data to TimeEntry format. Implement duplicate detection and replacement logic for same-day entries. Add support for detecting entry types (WORK, VACATION, SICK, HOLIDAY) from project paths. Create ImportLog records for tracking all imports. Build preview functionality showing affected dates, new/replaced entries, and warnings. Add comprehensive error handling for malformed JSON, invalid dates, and processing failures. Implement file hash generation for duplicate import detection.",
        "testStrategy": "Test upload of valid Timing JSON file processes correctly. Verify file size limits are enforced. Confirm duplicate imports replace existing entries properly. Test invalid JSON files are rejected with clear error messages. Validate import logging captures all processing statistics. Ensure transaction rollback works on processing errors.",
        "priority": "medium",
        "dependencies": [
          3
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Create file upload API route with Next.js",
            "description": "Implement file upload endpoint using Next.js 15 API routes with proper validation",
            "details": "Create app/api/upload/route.ts:\n- POST handler using FormData API\n- Parse multipart/form-data with Next.js built-in support\n- Validate file size (max 10MB)\n- Validate file type (JSON only)\n- Parse and validate JSON structure\n- Use Zod schema for Timing export validation\nRequired fields: id, startDate, endDate, duration, project, activityTitle\nReturn preview data before actual import\nError handling with proper status codes",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 4
          },
          {
            "id": 2,
            "title": "Implement ImportService with Prisma transactions",
            "description": "Create service class for processing Timing exports with database transactions",
            "details": "Create app/services/import.service.ts:\n- processTimingExport() method with Prisma $transaction\n- analyzeImport() for duplicate detection based on timingId\n- parseTimingEntry() to transform Timing format to TimeEntry\n- detectType() method for entry classification:\n  * 'Krankheit' → SICK\n  * 'Urlaub' → VACATION\n  * 'Feiertag' → HOLIDAY\n  * Default → WORK\n- Replace same-day entries in transaction\n- Generate ImportLog records with statistics\n- Return preview with affected dates and counts\nUse packages/shared/types for all type definitions",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 4
          },
          {
            "id": 3,
            "title": "Create upload UI component with drag-and-drop",
            "description": "Build React component for file upload with drag-and-drop support and preview",
            "details": "Create app/components/upload/upload-zone.tsx:\n- Use react-dropzone or native HTML5 drag-and-drop\n- Show upload progress with shadcn/ui Progress\n- Display file validation errors with Toast\n- Show import preview before confirmation:\n  * Affected dates list\n  * New entries count\n  * Replaced entries count\n  * Warnings for duplicates\n- Use TanStack Query mutation for upload\n- Optimistic UI updates\n- Success/error notifications\nStyle with Tailwind CSS and shadcn/ui components",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 4
          }
        ]
      },
      {
        "id": 5,
        "title": "Develop Overtime Calculation Engine with Performance Optimization",
        "description": "Build the core overtime calculation system with daily, weekly, and monthly balance aggregation, including caching mechanisms and the materialized view integration from the architecture.",
        "details": "Create OvertimeService with methods for daily, weekly, monthly balance calculations. Implement calculation logic: actual hours - target hours (from UserSettings). Build cumulative balance calculator across all time periods. Add support for different entry types with proper overtime rules (weekend = 100% overtime). Create 15-minute precision rounding for all calculations. Implement CacheService as shown in architecture with 5-minute TTL for balance queries. Build WeeklyStatisticsService using the materialized view when available. Add cache invalidation on data imports and updates. Create recalculation endpoints for correcting historical data. Implement statistical aggregation endpoints for dashboard display. Add support for custom work day definitions from user settings.",
        "testStrategy": "Verify daily balance calculations match manual calculations. Test weekly and monthly aggregations sum correctly. Confirm cache improves query performance. Validate cache invalidation works after imports. Test overtime rules apply correctly for weekends. Ensure precision rounding maintains accuracy.",
        "priority": "high",
        "dependencies": [
          4
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Create OvertimeService with calculation logic",
            "description": "Build service for calculating overtime balances with caching",
            "details": "Create app/services/overtime.service.ts:\n- calculateBalance(userId, startDate?, endDate?) main method\n- Use Prisma to fetch TimeEntry records\n- Compare actual hours vs UserSettings.weeklyHours\n- Handle different entry types:\n  * WORK: Count as worked hours\n  * VACATION/SICK: Count as target hours\n  * HOLIDAY: Skip from calculation\n- 15-minute precision: Math.round(hours * 4) / 4\n- Implement in-memory caching with 5-minute TTL\n- invalidateCache() on data changes\nCreate API route app/api/statistics/overtime/route.ts\nReturn format: { balance: number, details: {...} }",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 5
          },
          {
            "id": 2,
            "title": "Create weekly and monthly statistics API routes",
            "description": "Build API endpoints for weekly and monthly overtime statistics",
            "details": "Create app/api/statistics/weekly/route.ts:\n- GET handler with year and week parameters\n- Aggregate daily entries by week\n- Calculate weekly overtime (actual - target)\n- Return daily breakdown and weekly total\n\nCreate app/api/statistics/monthly/route.ts:\n- GET handler with year and month parameters\n- Aggregate entries by month\n- Include billable vs non-billable hours\n- Return weekly breakdown within month\n\nBoth routes use OvertimeService for calculations\nAdd proper TypeScript types in packages/shared/types/statistics.ts\nUse Server Components where possible for caching",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 5
          }
        ]
      },
      {
        "id": 6,
        "title": "Build React Frontend Dashboard with Real-time Updates",
        "description": "Create the complete React frontend application with Material-UI components, featuring the main dashboard, file upload interface, authentication views, and responsive design as specified in the PRD and architecture.",
        "details": "Initialize React app with Vite, TypeScript, and Material-UI v5. Set up Zustand store for state management and TanStack Query for API communication. Create authentication context and protected route handling. Build login/logout components with form validation. Implement main dashboard with prominent balance display (green positive, red negative styling). Create file upload component using react-dropzone with drag-and-drop functionality. Add upload progress indicators and error/success messaging. Build responsive grid layout using MUI Grid system for all screen sizes. Implement loading states with skeleton loaders throughout the application. Create API service layer using Axios with JWT token handling. Add auto-refresh functionality when new data is imported. Set up environment configuration for API URL and build optimization.",
        "testStrategy": "Test responsive design works on mobile and desktop viewports. Verify file upload shows proper progress and error states. Confirm authentication flow redirects appropriately. Test dashboard displays accurate overtime balance with correct color coding. Validate loading states appear during API calls. Ensure auto-refresh updates data without user intervention.",
        "priority": "medium",
        "dependencies": [
          5
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Create authentication pages and components",
            "description": "Build login, register, and auth-related UI components using Next.js and shadcn/ui",
            "details": "Create app/(auth)/login/page.tsx:\n- Server Component with form using Server Actions\n- shadcn/ui Form with react-hook-form\n- Email and password fields with validation\n- \"Remember me\" checkbox\n- Link to register page\n\nCreate app/(auth)/register/page.tsx:\n- Registration form with email, password, confirm password\n- Client-side validation with Zod\n- Server Action for user creation\n- Auto-login after registration\n\nCreate app/components/layout/user-menu.tsx:\n- Display current user email\n- Logout button with signOut() from NextAuth\n- User settings link",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 6
          },
          {
            "id": 2,
            "title": "Build main dashboard with overtime display",
            "description": "Create dashboard page showing overtime balance and key statistics",
            "details": "Create app/(dashboard)/dashboard/page.tsx:\n- Server Component fetching initial data\n- Display cards using shadcn/ui Card component:\n  * Overtime balance (large number, color-coded)\n  * This week's balance\n  * This month's balance\n  * Last import date\n\nCreate app/components/dashboard/overtime-card.tsx:\n- Client Component with live updates via TanStack Query\n- Color coding: green (positive), red (negative)\n- Loading skeleton while fetching\n- Refresh button with mutation\n\nCreate app/components/dashboard/stats-grid.tsx:\n- Responsive grid layout with Tailwind\n- Statistical cards for weekly/monthly views\n- Charts using Recharts for trends",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 6
          },
          {
            "id": 3,
            "title": "Create weekly and entries view pages",
            "description": "Build pages for viewing time entries and weekly breakdowns",
            "details": "Create app/(dashboard)/entries/page.tsx:\n- Table view using shadcn/ui Table\n- Columns: Date, Start, End, Duration, Type, Project\n- Pagination with shadcn/ui Pagination\n- Filter by date range and type\n- Sort by columns\n- Delete entries with confirmation dialog\n\nCreate app/(dashboard)/statistics/weekly/page.tsx:\n- Week selector with navigation arrows\n- Daily breakdown table\n- Visual chart of daily hours\n- Week total and overtime calculation\n- Export to CSV button\n\nUse TanStack Table for advanced table features\nImplement virtual scrolling for large datasets\nAdd loading states and error boundaries",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 6
          }
        ]
      }
    ],
    "metadata": {
      "created": "2025-09-11T19:01:38.352Z",
      "updated": "2025-09-11T19:01:38.352Z",
      "description": "Tasks for master context"
    }
  }
}